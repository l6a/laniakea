#!/usr/bin/env bash
#
# Copyright 2019 Chi-kwan Chan
# Copyright 2019 Steward Observatory
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.  You
# may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.  See the License for the specific language governing
# permissions and limitations under the License.

#==============================================================================
# The `laniakea` command supports multiple container backends,
# including docker and singularity

for backend in docker singularity; do
	if ${backend} --version &> /dev/null; then
		L6A_BACKEND=${backend}
		break
	fi
done; unset backend

if [ -z ${L6A_BACKEND+x} ]; then
	echo 'Container backend not found'
	exit -1
else
	L6A_EXEC="$(which $L6A_BACKEND)"
fi

#==============================================================================
# Helper functions, which may be backend dependent

FLAGS=()

addflags() {
	FLAGS=("${FLAGS[@]}" "$@")
}

#------------------------------------------------------------------------------

docker_search() {
	i="$1" # image: keep it short so the cases below are readable
	case "$i" in
	*/*) p=("$i" "$i*");;
	*  ) p=("$i" "$i*" "*/$i" "*/$i*");;
	esac

	for q in "${p[@]}"; do
		i=$("${L6A_EXEC}" images -f "reference=$q" -q | head -n1)
		test -n "$i" && break
	done
	test -z "$i" && unknown "$i"

	"${L6A_EXEC}" images            \
		--filter "reference=$q" \
		--format '{{.Repository}}:{{.Tag}}' | head -n1
}

singularity_search() {
	i="$1"
	if test "${#i}" -ge 4 -o "${i: -4}" != '.sif'; then
		for p in . "$(echo ${L6A_IMAGE_PATH} | tr ':' ' ')"; do
			if test -f "${p}/${i}.sif"; then
				i="${p}/${i}.sif"
				break
			fi
		done
	fi
	echo "$i"
}

#------------------------------------------------------------------------------

docker_run() {
	addflags '--rm' '-i' '-t'
	addflags -u "$(id -u):$(id -g)" -e USER
	addflags -v "$HOME:/home/$USER"
	"${L6A_EXEC}" run "${FLAGS[@]}" "${@}"
}

singularity_run() {
	"${L6A_EXEC}" shell "${FLAGS[@]}" "${@}"
}

#==============================================================================
# The `laniakea` command has three functionalities: `help`, `unknown`,
# and `activate`, which should all exit after done.

help() {
	cat << EOF
Usage: $cmd <subcommand> [opts] [args]

laniakea makes running containers natural and portable.
${L6A_BACKEND} backend is used: "${L6A_EXEC}".

Basic commands:
  activate        Run a ${L6A_BACKEND} container as an environment.

Options:
  --develop,-d    Activate a ${L6A_BACKEND} environment in development mode
  --help,-h       Print this help

Report laniakea (l6a) bugs to <chanc@arizona.edu>.
EOF
	exit 0
}

unknown() {
	cat << EOF
Unknown subcommand "$sub"; try \`$cmd --help\`.
EOF
	exit 1
}

activate() {
	# The `activate` function should check its first argument,
	# look for the appropriate docker image to use, and send the
	# arguments to `${L6A_BACKEND}_run`.

	test "${1:0:1}" != '-' && set -- "$(${L6A_BACKEND}_search $1)" "${@:2}"

	echo "[laniakea] activating \"$1\" with ${L6A_BACKEND}"

	${L6A_BACKEND}_run "$@"
	exit $?
}

#==============================================================================
# The "main" program

cmd="$(basename $0)"

while :; do
	sub="$1"
	case "$sub" in
	"--develop" | "-d"  )
		# Development mode for python packages
		shift
		pkg="$(basename $1)"
		hst="${1%:*}"
		con="/usr/local/src/${pkg##*:}"
		test "${hst:0:1}" == '/' || hst="$PWD/$hst" # absolute path
		echo "Dev-mode for \"$pkg\" (\"$hst\" -> \"$con\")"
		addflags -v "$hst:$con"
		;;
	"--help" | "-h" | "") help                  ;;
	"--x11"  | "-x"     ) addflags $(x11-flags) ;;
	"activate"          ) activate "${@:2}"     ;;
	*                   ) activate "$@"         ;;
	esac
	shift
done
